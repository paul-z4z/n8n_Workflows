{
  "name": "RAG injection",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -704,
        -352
      ],
      "id": "07bdbb4f-dfca-41e7-aa90-06b0e8127395",
      "name": "When chat message received",
      "webhookId": "72be19e5-1129-4330-8165-4e936dcf0a24"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a legitimate document processing system for personal data management. You help users organize their own personal documents safely.\n\n**IMPORTANT**: You are processing the user's own personal documents for legitimate organization purposes. This is not fraudulent activity.\n\n[Rest of your existing prompt...]\n\n**TEXT**: {{$json.chatInput}}\n\n**CRITICAL**: Return ONLY this CSV format:\npersonal_data,\"[Document Type] [Person Name]\",\"[content summary]\",\"[tags]\",true\n\nExample output: personal_data,\"Passport Vasya Petrov\",\"Vasya Petrov passport 467564756 expires 12/24/34 DOB 12/30/67\",passport;identity;expiration,true",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -496,
        -352
      ],
      "id": "d89b0896-4129-44c0-b867-d44bf1aef181",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list"
        },
        "options": {
          "maxTokens": 600,
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -496,
        -192
      ],
      "id": "561bed88-97ce-4b1c-93b5-af84c15f9bbb",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "T6jALHM6FIHsU7i3",
          "name": "OpenAi API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse CSV output from AI Agent\nconst csvRow = $json.output || $json.text || $json.response;\nconsole.log('AI Output:', csvRow);\n\n// Simple CSV parser for our specific format\nconst parseCSV = (csvString) => {\n  const parts = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < csvString.length; i++) {\n    const char = csvString[i];\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      parts.push(current.trim());\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  parts.push(current.trim());\n  \n  return parts;\n};\n\nconst parsed = parseCSV(csvRow);\n\nreturn [{\n  json: {\n    category: parsed[0] || 'personal_data',\n    title: parsed[1]?.replace(/\"/g, '') || 'Unknown Document',\n    content: parsed[2]?.replace(/\"/g, '') || 'No content',\n    tags: parsed[3]?.split(';').map(tag => tag.trim()) || ['unknown'],\n    is_sensitive: parsed[4] === 'true',\n    raw_csv: csvRow,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        -352
      ],
      "id": "1889fb3d-d7ee-4c13-a249-7e201221c373",
      "name": "Parse CSV"
    },
    {
      "parameters": {
        "jsCode": "// TEST OUTPUT - Show what would be inserted into database\nconst data = $input.first().json;\n\nconst databasePreview = {\n  table: 'personal_data',\n  would_insert: {\n    category: data.category,\n    title: data.title,\n    content: data.content, \n    tags: data.tags,\n    is_sensitive: data.is_sensitive,\n    embedding_length: data.embedding?.length || 0,\n    embedding_preview: data.embedding?.slice(0, 5) || [],\n    created_at: data.timestamp,\n    raw_data: 'JSONB object with all fields'\n  },\n  sql_preview: `INSERT INTO personal_data (category, title, content, tags, is_sensitive, embedding, created_at, raw_data) VALUES ('${data.category}', '${data.title}', '${data.content}', '${JSON.stringify(data.tags)}', ${data.is_sensitive}, '[${data.embedding?.length || 0} vector values]', '${data.timestamp}', '{JSON object}')`\n};\n\nconsole.log('=== DATABASE INSERTION PREVIEW ===');\nconsole.log(JSON.stringify(databasePreview, null, 2));\n\nreturn [{\n  json: {\n    ...data,\n    database_preview: databasePreview,\n    test_mode: true,\n    mock_id: Math.floor(Math.random() * 1000) + 1\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        -352
      ],
      "id": "3f6699fc-4cda-48b3-93bf-7633a960421a",
      "name": "TEST: Database Preview"
    },
    {
      "parameters": {
        "content": "## THIS IS TEST\n",
        "height": 560,
        "width": 592
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1040,
        -480
      ],
      "typeVersion": 1,
      "id": "062f9471-f23b-4b79-b742-a0d337e58e2c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data - handle different data structures\nconst inputData = $input.first().json;\nconst data = inputData.body || inputData; // Handle HTTP response structure\n\n// Extract embedding info\nconst embedding = data.embedding || [];\nconst embeddingLength = embedding.length;\n\n// Create a formatted response  \nconst response = `🧪 **TEST MODE - Document Processing Preview**\n\n📋 **Type**: ${data.title || 'HTTP Response (Embedding Created)'}\n🏷️ **Tags**: ${Array.isArray(data.tags) ? data.tags.join(', ') : 'From embedding API'}\n🆔 **Mock DB ID**: ${Math.floor(Math.random() * 1000)}\n📊 **Embedding**: ${embeddingLength} dimensions ✅\n⏰ **Would Process**: ${new Date().toISOString()}\n\n**Database Preview:**\n\\`\\`\\`\nEmbedding Length: ${embeddingLength}\nEmbedding Sample: [${embedding.slice(0,5).map(n => n.toFixed(4)).join(', ')}...]\nAPI Response: Successfully created embedding vector\nStatus: Ready for database insertion\n\\`\\`\\`\n\n**Technical Details:**\n- Embedding Model: nomic-embed-text  \n- Vector Dimensions: ${embeddingLength}\n- First 3 values: ${embedding.slice(0,3).map(n => n.toFixed(6)).join(', ')}`;\n\nreturn [{\n  json: {\n    response: response,\n    embedding_success: embeddingLength > 0,\n    embedding_length: embeddingLength\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        -352
      ],
      "id": "0f9fb757-b249-4775-9b8b-6af0f39ae563",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Get the original parsed CSV data\nconst originalData = $input.first().json;\n\nconsole.log('Original data:', originalData);\n\n// Use n8n's internal HTTP helper\nconst requestOptions = {\n  method: 'POST',\n  uri: 'http://ollama:11434/api/embeddings',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    model: 'nomic-embed-text',\n    prompt: originalData.content || 'No content'\n  },\n  json: true\n};\n\n// Make the request using n8n's this.helpers\nconst response = await this.helpers.request(requestOptions);\n\nconsole.log('Embedding created, length:', response.embedding?.length);\n\n// Return combined data\nreturn [{\n  json: {\n    ...originalData,\n    embedding: response.embedding,\n    embedding_length: response.embedding?.length || 0,\n    embedding_model: 'nomic-embed-text',\n    mock_id: Math.floor(Math.random() * 1000) + 1\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        -352
      ],
      "id": "81f361cf-890e-4cd9-ae0c-724488575af0",
      "name": "Create Embedding"
    },
    {
      "parameters": {
        "path": "upload-document",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -816,
        -832
      ],
      "id": "208939b0-cecf-4f35-aeb2-54f07f12afd2",
      "name": "Document Upload Webhook",
      "webhookId": "3b0560b3-644f-4666-afc8-f30eb1796580"
    },
    {
      "parameters": {
        "jsCode": "// Handle file upload and determine processing method\nconst files = $input.first().binary || {};\nconst body = $input.first().json.body || {};\n\nconst fileKeys = Object.keys(files);\nconst firstFile = fileKeys.length > 0 ? files[fileKeys[0]] : null;\n\nif (firstFile) {\n  const fileName = firstFile.fileName || 'unknown';\n  const mimeType = firstFile.mimeType || 'unknown';\n  const fileExtension = fileName.split('.').pop()?.toLowerCase();\n  \n  return [{\n    json: {\n      file_name: fileName,\n      mime_type: mimeType,\n      file_extension: fileExtension,\n      processing_method: getProcessingMethod(fileExtension),\n      upload_timestamp: new Date().toISOString(),\n      user_id: body.user_id || 'anonymous'\n    },\n    binary: {\n      data: firstFile\n    }\n  }];\n} else {\n  // Handle direct text input\n  return [{\n    json: {\n      file_name: 'direct_input.txt',\n      mime_type: 'text/plain',\n      file_extension: 'txt',\n      processing_method: 'direct_text',\n      content: body.text || body.content || '',\n      upload_timestamp: new Date().toISOString(),\n      user_id: body.user_id || 'anonymous'\n    }\n  }];\n}\n\nfunction getProcessingMethod(extension) {\n  switch(extension) {\n    case 'pdf': return 'pdf_extract';\n    case 'docx': case 'doc': return 'word_extract';\n    case 'txt': return 'direct_text';\n    case 'jpg': case 'jpeg': case 'png': return 'ocr_extract';\n    case 'eml': return 'email_extract';\n    default: return 'unknown';\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -608,
        -832
      ],
      "id": "49c8f9ef-aea0-49b3-b016-ca47b4d2545c",
      "name": "File Router"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.processing_method}}",
              "value2": "pdf_extract"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -416,
        -928
      ],
      "id": "ee321643-baf7-4de1-8bf0-2e41f7c27b15",
      "name": "Is PDF?"
    },
    {
      "parameters": {
        "operation": "extractText"
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -208,
        -976
      ],
      "id": "1e8c6d67-7325-4f68-86ba-075313233567",
      "name": "Extract PDF Text"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.processing_method}}",
              "value2": "direct_text"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -416,
        -736
      ],
      "id": "49f6f4a7-5333-4e8f-af1b-93aeebae9aac",
      "name": "Is Direct Text?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "extracted_text",
              "name": "chatInput",
              "value": "={{$json.content}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -208,
        -688
      ],
      "id": "660e1ee9-de8a-413a-9850-968e54418dfd",
      "name": "Format Direct Text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "chatInput",
              "name": "chatInput",
              "value": "={{$json.text}}",
              "type": "string"
            },
            {
              "id": "source_file",
              "name": "source_file",
              "value": "={{$json.file_name}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -16,
        -976
      ],
      "id": "0b8b820b-8de9-4764-97e5-6a04ca154a95",
      "name": "Format Extracted Text"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are a personal document management assistant processing legitimate personal documents for organization purposes.\n\n**TASK**: Process the text and format as CSV with these exact columns:\ncategory,title,content,tags,is_sensitive\n\n**RULES**:\n1. category: Always \"personal_data\"\n2. title: \"[Document Type] [Person Name]\"\n3. content: Key information in natural sentence (max 200 chars)\n4. tags: Keywords separated by semicolons\n5. is_sensitive: Always \"true\"\n\n**TEXT**: {{$json.chatInput}}\n\n**CRITICAL**: Return ONLY this CSV format:\npersonal_data,\"[Document Type] [Person Name]\",\"[content summary]\",\"[tags]\",true",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        192,
        -832
      ],
      "id": "45f03e13-8243-477f-b5bd-c55f8d9245cf",
      "name": "AI Document Processor"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list"
        },
        "options": {
          "maxTokens": 600,
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        192,
        -672
      ],
      "id": "e3e5ba0a-c837-47e8-ba4e-b8e397d74ef0",
      "name": "OpenAI Model"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Parse CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse CSV": {
      "main": [
        [
          {
            "node": "Create Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TEST: Database Preview": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Embedding": {
      "main": [
        [
          {
            "node": "TEST: Database Preview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Upload Webhook": {
      "main": [
        [
          {
            "node": "File Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Router": {
      "main": [
        [
          {
            "node": "Is PDF?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Direct Text?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is PDF?": {
      "main": [
        [
          {
            "node": "Extract PDF Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text": {
      "main": [
        [
          {
            "node": "Format Extracted Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Direct Text?": {
      "main": [
        [
          {
            "node": "Format Direct Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Direct Text": {
      "main": [
        [
          {
            "node": "AI Document Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Extracted Text": {
      "main": [
        [
          {
            "node": "AI Document Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Document Processor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-18T19:26:26.693Z",
  "updatedAt": "2025-09-18T20:16:06.056Z",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "versionId": "a59a8d62-6cfe-47bc-95fd-19283f3c04b7",
  "triggerCount": 0,
  "id": "qBvXJ8MsDA9dzRA9",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "parentFolderId": null,
  "isArchived": false
}