{
  "name": "draft _PlanB weekly Cleanup on GitHub",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 3 * * 0"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "30808757-5f33-45b7-892e-ab12afd62e0a",
      "name": "Trigger"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "list",
        "owner": {
          "__rl": true,
          "value": "paul-z4z",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_Workflows",
          "mode": "name"
        }
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        208,
        0
      ],
      "id": "84f5c278-ef15-42d4-b976-6b6296c96390",
      "name": "List files",
      "webhookId": "ff504905-79b3-4eca-80e2-23a22a68ae5e",
      "credentials": {
        "githubApi": {
          "id": "9RWBslDcc6pPEYjG",
          "name": "GitHub backup"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const allFiles = $input.all();\nconst folderGroups = {};\n\nfor (const file of allFiles) {\n  const path = file.json.path;\n  const name = file.json.name;\n  \n  if (file.json.type === 'file' && name.endsWith('.json')) {\n    if (path.startsWith('individual/') || path.startsWith('all_workflows/')) {\n      const folderPath = path.substring(0, path.lastIndexOf('/'));\n      \n      if (!folderGroups[folderPath]) {\n        folderGroups[folderPath] = [];\n      }\n      \n      folderGroups[folderPath].push({\n        path: path,\n        name: name,\n        sha: file.json.sha,\n        created: file.json.name\n      });\n    }\n  }\n}\n\nconst filesToDelete = [];\n\nfor (const [folder, files] of Object.entries(folderGroups)) {\n  files.sort((a, b) => b.created.localeCompare(a.created));\n  const oldFiles = files.slice(5);\n  \n  for (const file of oldFiles) {\n    filesToDelete.push({\n      path: file.path,\n      name: file.name,\n      sha: file.sha\n    });\n  }\n}\n\nreturn filesToDelete;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        0
      ],
      "id": "c722aab4-e15a-4762-b771-060d2089a48f",
      "name": "Old files to delete"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "delete",
        "owner": {
          "__rl": true,
          "value": "paul-z4z",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_Workflows",
          "mode": "name"
        },
        "filePath": "={{ $json.path }}"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        624,
        0
      ],
      "id": "562f596e-484d-449e-810b-1f2d81910f89",
      "name": "Delete a file",
      "webhookId": "bdf84267-911c-4390-ad12-2535d5fc9ea3",
      "credentials": {
        "githubApi": {
          "id": "9RWBslDcc6pPEYjG",
          "name": "GitHub backup"
        }
      }
    }
  ],
  "connections": {
    "Trigger": {
      "main": [
        [
          {
            "node": "List files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List files": {
      "main": [
        [
          {
            "node": "Old files to delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Old files to delete": {
      "main": [
        [
          {
            "node": "Delete a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-26T00:50:40.400Z",
  "updatedAt": "2025-08-28T19:07:27.794Z",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Weekly Cleanup Trigger": {
      "recurrenceRules": []
    }
  },
  "pinData": {},
  "versionId": "a2439c07-3a5c-4e1f-9a2a-080c842a688e",
  "triggerCount": 1,
  "id": "Zqr7a6tyY88sT4pv",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "parentFolderId": null,
  "isArchived": false
}